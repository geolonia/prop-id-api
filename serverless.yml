service: estate-id-api
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-export-env
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  apiGateway:
    shouldStartNameWithService: true
  endpointType: REGIONAL
  environment:
    STAGE: ${self:provider.stage}

    # App configs
    ZOOM: ${self:custom.zoomLevel}
    ACCESS_TOKEN_SALT: ${env:ACCESS_TOKEN_SALT}
    # IPC configs
    INCREMENTP_VERIFICATION_API_ENDPOINT: "https://d3q1ylas6o7xmg.cloudfront.net/v1"
    INCREMENTP_VERIFICATION_API_KEY: ${env:INCREMENTP_VERIFICATION_API_KEY}
    # Internal Stack Refs
    AWS_DYNAMODB_API_KEY_TABLE_NAME: ${self:custom.awsDynamodbApiKeyTableName}
    AWS_DYNAMODB_ESTATE_ID_TABLE_NAME: ${self:custom.awsDynamodbEstateIdTableName}
    AWS_DYNAMODB_LOG_TABLE_NAME: ${self:custom.${self:provider.stage}.AWS_DYNAMODB_LOG_TABLE_NAME}

    AUTH0_CLIENT_ID: ${self:custom.${self:provider.stage}.AUTH0_CLIENT_ID}
    AUTH0_DOMAIN: ${self:custom.${self:provider.stage}.AUTH0_DOMAIN}
    AUTH0_MGMT_DOMAIN: ${self:custom.${self:provider.stage}.AUTH0_MGMT_DOMAIN, self:provider.environment.AUTH0_DOMAIN}

    RELEASE_VER: ${env:GITHUB_SHA, self:provider.stage}
    SENTRY_DSN: ${env:SENTRY_DSN, ''}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  layers:
    - arn:aws:lambda:ap-northeast-1:943013980633:layer:SentryNodeServerlessSDK:9

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - kms:Decrypt
          Resource:
            - !Join
              - ":"
              - - "arn:aws:ssm"
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - parameter/propid/auth0/${self:provider.environment.AUTH0_CLIENT_ID}
            - !Join
              - ":"
              - - "arn:aws:ssm"
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - parameter/propid/slack/main
            - !Join
              - ":"
              - - "arn:aws:kms"
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - "key/alias/aws/ssm"

        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
          Resource:
            - !GetAtt estateIdTable.Arn
            - !Join
              - ""
              - - !GetAtt estateIdTable.Arn
                - "/index/*"
            - !GetAtt apiKeyTable.Arn
            - !Join
              - ""
              - - !GetAtt apiKeyTable.Arn
                - "/index/*"
            - !GetAtt logTable.Arn

custom:
  # [ATTENTION] All Estate IDs will be changed If zoom altered.
  zoomLevel: 22
  awsDynamodbApiKeyTableName: estate-id-api-key-${self:provider.stage}
  awsDynamodbEstateIdTableName: estate-id-${self:provider.stage}

  local:
    AUTH0_CLIENT_ID: "Odt4Kq2h7HTJsbkzhVrY4Rm7QLhMkFLH"
    AUTH0_DOMAIN: "prop-id-dev.jp.auth0.com"
    AWS_DYNAMODB_LOG_TABLE_NAME: estate-id-log-local
  dev:
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID_DEV, ''}
    AUTH0_DOMAIN: "prop-id-dev.jp.auth0.com"
    admin_origins: "http://localhost:*,https://*-g-prop-id-app.netlify.app"
    AWS_DYNAMODB_LOG_TABLE_NAME: !Ref logTable
  v1:
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID_V1, ''}
    AUTH0_DOMAIN: "auth.propid.jp"
    AUTH0_MGMT_DOMAIN: "prop-id.jp.auth0.com"
    admin_origins: "https://app.propid.jp"
    AWS_DYNAMODB_LOG_TABLE_NAME: !Ref logTable

package:
  patterns:
    - "*.json"
    - "!dist/**/*"
    - "!.build/**/*"
    - "!node_modules/.yarn-integrity"
    - "!node_modules/.bin/*"

resources:
  Resources:
    apiKeyTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.awsDynamodbApiKeyTableName}
        AttributeDefinitions:
          - AttributeName: apiKey
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: apiKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: GSI1PK-GSI1SK-index
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    estateIdTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.awsDynamodbEstateIdTableName}
        AttributeDefinitions:
          - AttributeName: estateId
            AttributeType: S
          - AttributeName: address
            AttributeType: S
          - AttributeName: tileXY
            AttributeType: S
          - AttributeName: serial
            AttributeType: N
        KeySchema:
          - AttributeName: estateId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: address-index
            KeySchema:
              - AttributeName: address
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: tileXY-index
            KeySchema:
              - AttributeName: tileXY
                KeyType: HASH
              - AttributeName: serial
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: 'NEW_IMAGE'

    logTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

functions:
  public:
    handler: src/public.handler
    events:
      - http:
          path: '/'
          method: get

  idQuery:
    handler: src/idQuery.handler
    events:
      - http:
          path: '/{estateId}'
          method: get
          request:
            parameters:
              paths:
                estateId: true

  admin:
    handler: src/admin.handler
    events:
      - http:
          path: '/admin/keys'
          method: get
          cors: &default_cors
            cacheControl: 'max-age=600, s-maxage=600, proxy-revalidate'
            origin: ${self:custom.${self:provider.stage}.admin_origins, '*'}

      - http:
          path: '/admin/keys'
          method: post
          cors: *default_cors

      - http:
          path: '/admin/keys/{keyId}/reissue'
          method: patch
          request:
            parameters:
              paths:
                keyId: true
          cors: *default_cors

      - http:
          path: '/admin/query'
          method: get
          cors: *default_cors

      - http:
          path: '/admin/query/{estateId}'
          method: get
          request:
            parameters:
              paths:
                estateId: true
          cors: *default_cors

      - http:
          path: '/admin/feedback'
          method: post
          cors: *default_cors

  demo:
    handler: src/demo.handler
    events:
      - http:
          path: '/demo'
          method: get
      - http:
          path: '/demo/{estateId}'
          method: get
          request:
            parameters:
              paths:
                estateId: true

  idEvents:
    handler: src/idEvents.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt estateIdTable.StreamArn
          batchWindow: 30
          batchSize: 10
          # parallelizationFactor: 1
          # bisectBatchOnFunctionError: true
          # maximumRetryAttempts: 5
          # destinations:
          #   onFailure: !Ref some SQS queue
